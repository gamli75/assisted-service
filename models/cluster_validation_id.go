// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterValidationID cluster validation id
//
// swagger:model cluster-validation-id
type ClusterValidationID string

const (

	// ClusterValidationIDMachineCidrDefined captures enum value "machine-cidr-defined"
	ClusterValidationIDMachineCidrDefined ClusterValidationID = "machine-cidr-defined"

	// ClusterValidationIDMachineCidrEqualsToCalculatedCidr captures enum value "machine-cidr-equals-to-calculated-cidr"
	ClusterValidationIDMachineCidrEqualsToCalculatedCidr ClusterValidationID = "machine-cidr-equals-to-calculated-cidr"

	// ClusterValidationIDAPIVipDefined captures enum value "api-vip-defined"
	ClusterValidationIDAPIVipDefined ClusterValidationID = "api-vip-defined"

	// ClusterValidationIDAPIVipValid captures enum value "api-vip-valid"
	ClusterValidationIDAPIVipValid ClusterValidationID = "api-vip-valid"

	// ClusterValidationIDIngressVipDefined captures enum value "ingress-vip-defined"
	ClusterValidationIDIngressVipDefined ClusterValidationID = "ingress-vip-defined"

	// ClusterValidationIDIngressVipValid captures enum value "ingress-vip-valid"
	ClusterValidationIDIngressVipValid ClusterValidationID = "ingress-vip-valid"

	// ClusterValidationIDNoPendingForInputHost captures enum value "no-pending-for-input-host"
	ClusterValidationIDNoPendingForInputHost ClusterValidationID = "no-pending-for-input-host"

	// ClusterValidationIDAllHostsAreReadyToInstall captures enum value "all-hosts-are-ready-to-install"
	ClusterValidationIDAllHostsAreReadyToInstall ClusterValidationID = "all-hosts-are-ready-to-install"

	// ClusterValidationIDHasExactlyThreeMasters captures enum value "has-exactly-three-masters"
	ClusterValidationIDHasExactlyThreeMasters ClusterValidationID = "has-exactly-three-masters"
)

// for schema
var clusterValidationIdEnum []interface{}

func init() {
	var res []ClusterValidationID
	if err := json.Unmarshal([]byte(`["machine-cidr-defined","machine-cidr-equals-to-calculated-cidr","api-vip-defined","api-vip-valid","ingress-vip-defined","ingress-vip-valid","no-pending-for-input-host","all-hosts-are-ready-to-install","has-exactly-three-masters"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterValidationIdEnum = append(clusterValidationIdEnum, v)
	}
}

func (m ClusterValidationID) validateClusterValidationIDEnum(path, location string, value ClusterValidationID) error {
	if err := validate.EnumCase(path, location, value, clusterValidationIdEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster validation id
func (m ClusterValidationID) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterValidationIDEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
